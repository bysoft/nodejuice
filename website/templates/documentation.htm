<h1>Documentation</h1>
Watch the tutorial video.
<a href=http://vimeo.com/8495268>Watch The Simple Web Application Tutorial</a>.

<h2>Setup With Your Server</h2>
<ul>
    <li><a href=/#sidekick>Apache</a></li>
    <li><a href=/staticmatic>StaticMatic</a></li>
</ul>

<h2>NodeJuice Basic Explanation</h2>
NodeJuice ships with three separate servers: Seeker, Sidekick and WSGI.
<strong>Seeker</strong> is what allows automatic browser refresh on file change.
<strong>Sidekick</strong> is the gateway or proxy which connects to Apache, Passenger, Nginx, Cherokee, etc.
<strong>WSGI</strong> is a Web Server Gateway Interface and can server static files and execute V8 JavaScript on your server.
No need to worry about managing the servers yourself.
NodeJuice comes with a process manager and will figure this out for you.
All you need to do is add a <a href=#config>config file</a> to your project's directory.
Then point ./nodejuice at your project's directory and say what kind of setup you want run.

<h2>Basic Static Setup</h2>
To launch <div class=n>node</div><div class=j>Juice</div> 
as a static web server, simply execute the following command:

<pre class=code>./nodejuice /path/to/directory</pre>

This will launch both WSGI and Seeker Server.
Open your browser and go to:
<pre class=code>http://localhost:8080/<em>some-file-name-here.htm</em></pre>
Now you can edit <strong>*HTML*</strong> files and they will update automatically in your web browser.  No need to press reload every time you make a change.

<p>
<strong>
    ***If all you want is a simple file server, no need to read further.
</strong>
</p>

<h2>Setup for Web Applications</h2>
<ol>
    <li>
        Make a file called <strong>app.js</strong> in your application directory.
    </li>
    <li>Copy the following text into the app.js file.
<pre class=code><span class=keyword>var</span> app = exports;
app.journey = <span class=keyword>function</span>( request, response ) {
    response.impress( <span class=string>'/templates/index.htm'</span>, {
        dynamic : <span class=string>'my text here'</span>
    } );
};</pre>
    </li>
    <li>
        Create an HTML file 'your-app-dir/templates/index.htm'.
    </li>
    <li>
        Have the following configuration file in your application root directory.
    </li>
</ol>

<h2 id=config>Configuration File</h2>
This file needs to be in your application's root directory.
<pre class=code><span class=comment>// FILE: nodejuice.js</span>
exports.sidekick = {
    host  : <span class=keyword>null</span>, <span class=comment>// Leave 'null' to listen on all hosts.</span>
    port  : 8010, <span class=comment>// access your server from this port.</span>
    fetch : {     <span class=comment>// point to your web server.</span>
        host : <span class=string>'localhost'</span>, <span class=comment>// point to your web server.</span>
        port : 8080 <span class=comment>// point to your web server.</span>
    }
};

exports.seeker = {
    host   : <span class=keyword>null</span>, <span class=comment>// Leave 'null' to listen on all hosts.</span>
    port   : 8002,
    delay  : 200,   <span class=comment>// milliseconds before page starts to reload.</span>
                    <span class=comment>// setting too low will cause apahce read file error.</span>
    wait   : 1500,  <span class=comment>// milliseconds before a new connection.</span>
                    <span class=comment>// setting this too low will make crazziness.</span>
    add    : true,  <span class=comment>// allow new file to push updates.</span>
    remove : true,  <span class=comment>// allow file delete to push updates.</span>
    touch  : false, <span class=comment>// allow file touch to push updates.</span>
    access : false, <span class=comment>// allow file reads to push updates.</span>
    bits   : true,  <span class=comment>// allow chmod/chown to push updates.</span>
    save   : true,  <span class=comment>// allow file save to push updates.</span>
    dir    : true,  <span class=comment>// allow directory changes to push updates.</span>
    ignore : [ /git$/, /svn$/, /cvs$/, /swp$/, /~$/ ] <span class=comment>// stuff to ignore.</span>
};

exports.wsgi = {
    host  : <span class=keyword>null</span>, <span class=comment>// Leave 'null' to listen on all hosts.</span>
    port  : 8080,
    root  : <span class=string>'index.htm'</span>, <span class=comment>// used for static content as the default.</span>
    retry : { max: 4, wait: 120 }, <span class=comment>// number of retries to load a file.</span>
    url   : [ <span class=comment>// interface between browser URL Request and Files.</span>

        [/^\/app$/, <span class=string>'/app.js'</span>], <span class=comment>// run an application.</span>
        [/^\/.*/, <span class=string>'/static/'</span>],  <span class=comment>// serve content from /static/ dir.</span>
        [/^\/.*/, <span class=string>'/'</span>] <span class=comment>// server static content from root app dir.</span>

    ]
};
</pre>

<h2>Sidekick Setup for Apache</h2>
This instruction is on the <a href=/#sidekick>home page</a>.

<!-- <h2>URL Routing Examples</h2> -->

<h2>WSGI Functions for Web Applications</h2>

<p>
<div class=n>node</div><div class=j>Juice</div> sits on top of NodeJS.
All Node's functionality is available to you.
The first two arguments are modified versions of what you get from NodeJS.
</p>
<ul>
    <li>
        <a href=http://nodejs.org/api.html#_tt_http_serverrequest_tt>Request Object (ServerRequest)</a>
    </li>
    <li>
        <a href=http://nodejs.org/api.html#_tt_http_serverresponse_tt>Response Object (ServerResponse)</a>
    </li>
</ul>

<h3>App Journey</h3>
This is the <strong>main</strong> entry in your WSGI application.
<pre class=code><span class=keyword >var</span> app = exports;
app.journey = <span class=keyword >function</span>( response, request ) {
    <span class=comment >// your code here...</span>
};</pre>

<h3>Response Object</h3>
This object is available to you in your app.journey call.

<h4>response.attack</h4>
This is the basic response call to send text or data back to the web browser.
<pre class=code>response.attack(
    body,       // Delivery HTML, Text or Binary
    [code],     // OPTIONAL: HTTP 3-Digit Code (200, 404, 500, etc.)
    [type],     // OPTIONAL: "Content-Type" "text/html" "text/plain"
    [headers],  // OPTIONAL: HTTP Headers
    [encoding]  // OPTIONAL: "utf8" or "binary" the default is "utf8"
);</pre>
<pre class=code><span class=comment >// Example Use of response.attack()</span>
<span class=keyword>var</span> app = exports;
app.journey = <span class=keyword>function</span>( request, response ) {
    response.attack(
        <span class=string>'hello!'</span>,    <span class=comment>// text (body)</span>
        200,         <span class=comment>// response code</span>
        <span class=string>'text/html'</span>, <span class=comment>// content type.</span>
        {},    <span class=comment>// headers empty for no specail reason.</span>
        "utf8" <span class=comment>// encoding</span>
    );
};</pre>

<h4>response.impress</h4>
This is a template rendering call which sends directly to the browser after parse complete.
<pre class=code>response.impress(
    file,    // point the the file relative to your application directory.
    [object] // OPTIONAL: Will find all {{tags}} and impress data in place.
);</pre>
<pre class=code><span class=comment >// Example Use of response.impress()</span>
<span class=keyword>var</span> app = exports;
app.journey = <span class=keyword>function</span>( request, response ) {
    response.impress( <span class=string>'/templates/index.htm'</span>, {
        food : <span class=string>'apple'</span>
    } );
};</pre>
Also available is response.utility.impress( file, args, callback );


<h4>response.appdir</h4>
Holds the location of your application directory.


<h4>response.utility.noble</h4>
The Utility Object has many powerful functions.
The first is a trustable file read command.
This file read command is a reliable conncurrent non-blocking I/O function.
<pre class=code>response.utility.noble(
    file,   // /path/to/file/name
    success // function( type, body, encoding ) callback on load.
    [fail]  // OPTIONAL: callback on failure.
);</pre>
<pre class=code><span class=comment >// Example Use of response.utility.noble()</span>
<span class=keyword >var</span> file = response.appdir + <span class=string >'/templates/index.htm'</span>;
response.utility.noble( file, <span class=keyword >function</span>( type, body, encoding ) {
    <span class=comment >// Send File to Browser</span>
    response.attack( body, 200, type, {}, encoding );
}, <span class=keyword >function</span>() {
    <span class=comment >// Send Error</span>
    response[<span class=string >'404'</span>]( request, response, file );
} );</pre>


<h4>response.utility.supplant</h4>
Base template impression function.
This is the <a href=http://javascript.crockford.com/remedial.html>Crockfordian Supplant Method</a>
posted by <a href=http://www.crockford.com/>Douglas Crockford</a>.
<pre class=code>response.utility.supplant(
    text,  // string of chars to update.
    object // Will find all {{tags}} and impress data in place.
);</pre>
<pre class=code><span class=comment >// Example Use of response.utility.supplant()</span>
<span class=keyword >var</span> parsed_text = response.utility.supplant(
    <span class=comment >// Parses as "Hello Frank Alphabet!"</span>
    <span class=string >"Hello {{name}}!"</span>, { name : <span class=string >"Frank Alphabet"</span> }
);</pre>


<h4>response.utility.inform</h4>
The Primary Logging Function.
<strong>This is the most used function.</strong>
This function is important to help you build your web application.
<pre class=code>response.utility.inform(
    object // What is to be logged.
);</pre>
<pre class=code><span class=comment >// Example Use of response.utility.inform()</span>
<span class=keyword >var</span> util = response.utility;
<span class=comment >// Print to terminal: { timestamp: 1262558727644, some_text: "log this" }</span>
util.inform({
    timestamp : util.earliest(),
    some_text : <span class=string >'log this'</span>
});</pre>


<h4>response.utility.recurse</h4>
Non-blocking Recursive Directory Loop.
Use this function to safely gather all files in all directories.
<pre class=code>response.utility.recurse(
    start,   // Starting Directory
    ignore,  // Array of regexs to ignore matching files/directories.
    callback // function(file) called EVERY TIME a File or Directory is found.
);</pre>
<pre class=code><span class=comment >// Example Use of response.utility.recurse()</span>
<span class=comment >// Stream a list of files to the web browser:</span>
response.sendHeader( 200, { <span class=string >"Content-Type"</span> : <span class=string >"text/plain"</span> } );

response.utility.recurse(
    response.appdir + <span class=string >'/static'</span>,
    [ /.git$/, /csv$/, /.svn$/, /pants/ ],
    <span class=keyword >function</span>(file) { response.sendBody( file + <span class=string >"\n"</span>, <span class=string >"utf8"</span> ); }
);

<span class=comment >// Only allow 1 second of data streaming.</span>
setTimeout( <span class=keyword >function</span>() {response.finish()}, 1000 );</pre>


<h4>response.utility.fetch</h4>
Download data from an outside source. This is a low level call and you get to play with the guts of every fetch.
<pre class=code>response.utility.fetch({
    port,     // 80
    host,     // "www.google.com"
    type,     // "GET" or "POST" or "HEAD"
    path,     // "/" or "/index.htm" or "/someurl"
    headers,  // { "Accept-Encoding" : "utf8" }
    body,     // "binary, text or POST data"
    encoding, // "binary" or "utf8"
    ready,    // function (response) {} when connection is made
    good,     // function ( chunk, response, encoding ) {} chunck recieved.
    fail,     // function ( chunk, response, encoding ) {} failure occurs.
    finished  // function ( final, response, encoding ) {} all is done.
})</pre>
<pre class=code><span class=comment >// Example Use of response.utility.fetch()</span>
response.utility.fetch({
    port     : 80,
    host     : <span class=string>"www.google.com"</span>,
    type     : <span class=string>"GET"</span>,
    path     : <span class=string>"/"</span>,
    finished : <span class=keyword>function</span>( data, res, encoding ) {
        <span class=comment>// Proxy google's home page to browser.</span>
        response.attack( data, 200, res.headers[<span class=string>'content-type'</span>], {}, encoding )
    }
})</pre>


<h4>response.utility.earliest</h4>
Simple timestamp function.
<pre class=code>response.utility.earliest();</pre>
<pre class=code><span class=comment >// Example Use of response.utility.earliest()</span>
<span class=keyword >var</span> timestamp = response.utility.earliest();</pre>




