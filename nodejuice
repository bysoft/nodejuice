#!/bin/bash

# TODO
# ====
# -website

# Usage:
# ======
#
# ./nodejuice directory [action]
# 
# directory = Application Directory to run you wsgi server or just the seeker.
# [action]  = options: [d]evelopment, [p]roduction
# [action]  = default is [d]evelopment
# [action]  = [d]evelopment will launch all servers to host locally.
# 
# Examples:
# =========
#
# This will launch all seeker and wsgi servers.
# ./nodejuice /home/stephen/application-directory
# 
# 
# This will launch only wsgi server only.
# ./nodejuice /home/stephen/application-directory p
# ./nodejuice /home/stephen/application-directory prod
# ./nodejuice /home/stephen/application-directory production
# ./nodejuice /home/stephen/application-directory k3i8sljf

mode="$2"
application=`echo $1 | sed -e 's#/\+$##'`

if [ "${application:0:1}" != "/" ]
then
    cwd=`pwd`
    application="`echo $cwd/$1 | sed -e 's#/\+$##'`"
fi

nodeconfig1="$application/configure/nodejuice.js"
nodeconfig2="$application/config/nodejuice.js"
nodeconfig3="$application/nodejuice.js"

nodejuice=`dirname $0`

if [ nodejuice='.' ]
then
    nodejuice="`pwd`"
fi

seeker="$nodejuice/servers/seeker.js"
wsgi="$nodejuice/servers/wsgi.js"
node="$nodejuice/symlinks/node"

## Check if Application Directory exixts
if [ ! -e $application ]
then
    echo -e "\nDirectory does not exist: $application"
    exit
fi

## Check for configurations files
if [[ ! -e "$nodeconfig1" && ! -e "$nodeconfig2" && ! -e "$nodeconfig3" ]]
then
    echo -e "\nNot a valid nodejuice application: $application"
    exit
fi

if [ -e "$nodeconfig1" ]
then
    nodeconfig="$nodeconfig1"
fi
if [ -e "$nodeconfig2" ]
then
    nodeconfig="$nodeconfig2"
fi
if [ -e "$nodeconfig3" ]
then
    nodeconfig="$nodeconfig3"
fi

nodeconfig="`echo $nodeconfig | sed -e 's#\.js$##'`"

ask_for_node() {
    echo -e "Node server not detected on your system."
    echo -e "Node must be installed to use nodejuice."
    echo -e "Download node at: http://nodejs.org/"
    echo -e "\nIf Node is installed in a different directory, "
    echo "type /location/to/node/node and press [enter] : "

    read usr_node

    if [ ! -e "$usr_node" ]
    then
        echo -e "\nThat's not a file try again :("
        exit
    else
        ## Create Symlink for user based on entered directory.
        rm "$node"
        `ln -s $usr_node $node`
    fi
}

## Check for node symlink
if [[ !( -e "$node" && -e "`readlink $node`" ) ]]
then

    ## check `which` for node
    if [ -e `which node` ]
    then
        ## Create Symlink for user
        rm "$node"
        which_node=`which node`
        `ln -s $which_node $node`
    else
        ask_for_node
    fi
fi

trap leave INT TERM EXIT

leave() {
    echo -e "\n\nnodejuice shuting down... goodbye"
    trap - INT TERM EXIT
    killall node
}

## Execute Seeker Server
## Execute WSGI Server
# echo -e "$node $seeker $application $nodejuice $nodeconfig $mode"
# echo -e "$node $wsgi $application $nodejuice $nodeconfig $mode"
$node $seeker $application $nodejuice $nodeconfig $mode &
$node $wsgi $application $nodejuice $nodeconfig $mode


