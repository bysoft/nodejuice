<h1>JavaScript V8 Seeker Server and WSGI</h1>
This is <span class=n>node</span><span class=j>Juice</span>.
It is a tool which allows you to develop with a push connection to your web browser.
Automatic browser refresh on file change or update is what you can call it.
Develop on one to many browsers simultaneously without needing to reload manually.


<h1>NodeJuice Video on Vimeo</h1>
<a href=http://vimeo.com/8459839>Watch the video to see what NodeJuice can do</a>.
<div>
<object width=400 height=300><param name=allowfullscreen value=true /><param name=allowscriptaccess value=always /><param name=movie value=http://vimeo.com/moogaloop.swf?clip_id=8459839&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1 /><embed src=http://vimeo.com/moogaloop.swf?clip_id=8459839&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1 type=application/x-shockwave-flash allowfullscreen=true allowscriptaccess=always width=400 height=300></embed></object><p><a href=http://vimeo.com/8459839>nodeJuice JavaScript V8 Seeker Server WSGI</a> from <a href=http://vimeo.com/user1189723>Stephen Blum</a> on <a href=http://vimeo.com>Vimeo</a>.</p>
</div>


<h1>2010.04.23 - Updated to Node 0.1.91</h1>
Enjoy the hyper performance boosts of Net2 branch merge on Node.


<h1>2010.04.05 - Updated to Node 0.1.33</h1>
<a href=/install>Download the latest performance enhanced NodeJS 0.1.33 version (or later)
to enjoy NodeJuice at blazing speeds!</a>


<h2>New Browser Scroll Synchronization with NodeJuice</h2>
Now all connected browsers will stay in sync while you scroll along each page.
Make sure to update your copy of nodeJuice today from GitHub.
This is one of several new features in development for nodeJuice 1.5.0 release.


<h2>NodeJuice Does What?</h2>
<span class=n>node</span><span class=j>Juice</span>
will transform the regular web developer into a <a href=#ninja>ninja programmer.*</a>
Check out the development enhancements:
<ul>
    <li><strong>Multi Browser Auto Reload on File Change</strong>
        <ul>
            <li>Every connected browser updates when you press save on your text editor or photoshop.</li>
            <li>Works with all web browsers. IE too.</li>
        </ul>
    </li>
    <li><strong>Auto Reload Technology Functions With All Servers</strong>
        <ul>
            <li>Works with Apache, Passenger, Nginx, Cherokee, and more.</li>
            <li>NodeJuice comes with a server in case you forgot yours.</li>
        </ul>
    </li>
    <li><strong>Server Side Error Detection Friendly Newbie Environment</strong>
        <ul>
            <li>NodeJuice will keep an open connection when PHP, Ruby, Python or Perl scripts throw errors.</li>
            <li>Correct the syntax error and press save to push updates to your browser instantly.</li>
        </ul>
    </li>
    <li><strong>Repository Friendly Automatic Updates</strong>
        <ul>
            <li>On git pull or svn up, all browsers update on the same beat.</li>
            <li>Catastrophy? Restore commits with git, svn, cvs or mercurial and all connected browsers will follow.</li>
        </ul>
    </li>
    <li><strong>Invalid Markup Safety Provides Newbie Friendly Development Environment</strong>
        <ul>
            <li>NodeJuice function regardless of bad HTML.</li>
            <li>Newb HTML is no match for the juice.</li>
        </ul>
    </li>
    <li><strong>JavaScript Syntax Error Detection</strong>
        <ul>
            <li>Syntax errors are no match for node juice to keep an open connection.</li>
        </ul>
    </li>
    <li><strong>Improve Development with the Juice from the Node</strong>
        <ul>
            <li>Save time reloading your web browser continuously.</li>
            <li>Eliminates a repetative step, reducing likeliness of self harm.</li>
            <li>Toss out the F5 key.</li>
            <li>No more needing to CTRL+R either.</li>
        </ul>
    </li>
    <li><strong>New File Discovery Invkokes Push to Browser</strong>
        <ul>
            <li>Adding new assets, such as images and sytle sheets, will push updates.</li>
            <li>Deleting asset files does the same.</li>
        </ul>
    </li>
    <li><strong>Customizable Browser Push Scenarios</strong>
        <ul>
            <li>Ignore particular directories and file types.</li>
            <li>Ignore detection types such as reads, writes, file touch, chmod, chown, delete and new file.</li>
        </ul>
    </li>
</ul>

<h2>NodeJuice sits Between the Server and Browser</h2>
NodeJuice sits between your web server and browser with a BOSH style long polling comet connection.
Works with all servers such as Apache, Passenger, Nginx, Cherokee, and more.
A web server isn't required, NodeJuice comes with one in case you forgot yours.
Works using many text editos like VIM, TextMate, Emacs, Dreamweaver and more.
NodeJuice comes with all the built-in tools you need to edit your files dynamically in real time.
NodeJuice works with IE, Safari, FF, Opera, Chrome and more.

There is nothing like the feeling you get when you press Save on your text editor and see all your browsers update instantly.
It's Free + Open Source.

It runs on
<span class=node>Node</span><span class=js>JS</span>;
a low level non-blocking network ready process with many capabilities. 

<h2>Does The Juice run on Windows XP or Later?</h2>
No. However, using any net capable text editor, such as Dreamweaver, through FTP/SSH connection to a unix system with NodeJuice will work great.  All Windows web browsers are supported.

<h2>NodeJuice on OSX, Linux and a few other Open Platforms</h2>
Develop with NodeJuice on any platform supported by nodejs. The recommended platform is a flavor of Linux with epoll dev headers.

<h2>How many browsers can I have connected to NodeJuice?</h2>
Like the Tootsie Pop, it's more than you want to count. Apache will have trouble with concurrency before nodejuice does.


<h2>Seeker Server: <a href=http://vimeo.com/8459839>Watch the Video</a></h2>
<div>
    It updates all connected browsers when a change occurs.
    <strong>Automatic browser refresh on file change or update</strong>
    is what you can call it.
    Seeker Server works on all servers. Even without a server.
    Seeker Server is independent of WSGI
    and can be used with other servers such as Apache.
    <a href=http://vimeo.com/8459839>Watch the Video</a>
</div>

<h2 id=sidekick>Apache and Seeker Server (Sidekick)</h2>
NOTE: This step isn't necessary if you are using nodeJuice WSGI.
This step is for Apache and other web servers.
In order to easily use apache or other web servers, simply setup Sidekick:

<ol>
    <li>
        Copy <em>nodejuice.js</em> configuration into your application dir.
        This is the directory where your PHP, Ruby, Perl or Python files live.
        <pre class=code>cp ./nodejuice/demos/apache/nodejuice.js /my/dir/.</pre>
    </li>
    <li>
        Edit the configuration file to point the 
        <strong>fetch</strong> variable at your server.
        <pre class=code>// nodejuice.js - the config file
exports.sidekick = {
    host  : null, // Leave 'null' to listen on all hosts.
    port  : 8010, // access your server from this port.
    fetch : {     // point to your web server.
        host : 'localhost', <span class=keyword>// &lt;-- point this to Apache or other server.</span>
        port : 8080         <span class=keyword>// &lt;-- point this to Apache or other server.</span>
    }
};

exports.seeker = {
    host   : null,  // Leave 'null' to listen on all hosts.
    port   : 8002,  // port :-/
    delay  : 180,   // time in ms before page starts to reload.
                    // setting too low will cause file read errors in Apache
    wait   : 1200,  // time in milliseconds before a new connection.
                    // setting too low will make crazziness.
    add    : true,  // allow new file to push updates.
    remove : true,  // allow file delete to push updates.
    touch  : false, // allow file touch to push updates.
    access : false, // allow file reads to push updates.
    bits   : true,  // allow chmod/chown to push updates.
    save   : true,  // allow file save to push updates.
    dir    : true,  // allow directory changes to push updates.
    ignore : [      // path or file name to ignore.
        /\/\./,
        /git$/,
        /svn$/,
        /cvs$/,
        /swp$/,
        /~$/
    ]
};</pre>
    </li>
    <li>
        Launch ./nodejuice seeker server.
        <pre class=code>./nodejuice /my/dir/ sidekick</pre>
    </li>
    <li>
        Point your web browser to Sidekick url.
        <pre class=code>http://localhost:8010/</pre>
    </li>
</ol>

<h2>Seeker Server and Apache (Bypass Sidekick Server)</h2>
NOTE: This step isn't necessary if you are using nodeJuice WSGI.
This is an alternative approach for Apache and other web servers.
It is recommended that you use <a href=#sidekick>Sidekick Setup</a>.
Using Sidekick isn't required with Apache or another web server.
However Sidekick provides error detection and will allow <span class=n>node</span><span class=j>Juice</span> to keep a connection open even if Apache throws an error.
It is recommended that you use <a href=#sidekick>Sidekick Setup</a>.

<ol>
    <li>
        Copy <em>nodejuice.js</em> configuration into your application dir.
        This is the directory where your PHP, Ruby, Perl or Python files live.
        <pre class=code>cp ./nodejuice/demos/apache/nodejuice.js /my/dir/.</pre>
    </li>
    <li>
        Launch ./nodejuice seeker server.
        <pre class=code>./nodejuice /my/dir/ seeker</pre>
    </li>
    <li>
        Paste the following in the HEAD Tag of <em>all HTML files.</em>
        <pre class=code>&lt;script src="http://localhost:8002"&gt;&lt;/script&gt;</pre>
    </li>
</ol>
<div>
    This method won't be as cool as using nodeJuice's Sidekick in the face of dangerous errors in your PHP, Ruby or Python applications.  So be careful!
</div>

<h2>WSGI</h2>
<p>To launch nodeJuice as an <strong>instant web server on any directory</strong>:</p>
<pre class=code>./nodejuice /path/to/directory</pre>

<p>To create simple web application <a href=/rad>/rad</a>:</p>

<pre class=code><span class=comment>// app-file.js</span>
<span class=keyword>rad</span> ( <span class=string >/^\/about$/</span>, {
    file : <span class=string >'/templates/about.htm'</span>,
    info : <span class=string >'some info here'</span>
} )

<span class=keyword>rad</span> ( <span class=string>/.*/</span>, <span class=string>'hello world'</span> )
</pre>

<p>An advanced (and faster) web application will look like:</p>

<pre class=code><span class=comment>// app-file.js</span>
<span class=keyword>var</span> app = exports
app.journey = <span class=keyword>function</span>( request, response ) {
    response.impress( <span class=string>'/templates/index.htm'</span>, {
        right_now : <span class=keyword>new</span> Date
    } )
}</pre>

Above are two example apps on
<span class=n>node</span><span class=j>Juice</span> V8 WSGI.
Simple right?
It's like Google App Engine GAE and other WSGI Frameworks.
The advanced web app example is faster and provides extra fallbacks.
However the rad() example is easy.
To run this application type:

<pre class=code>./nodejuice /path/to/directory</pre>

This will launch both WSGI and Seeker Server.
Open to view:
<pre class=code>http://localhost:8080/</pre>
However, that isn't the raddest part.
You are probably here to see what Seeker Server can do.

<h2 id=ninja><span class=n>node</span><span class=j>Juice</span>
will transform the regular web developer into a ninja programmer.*</h2>
This is sorta true, but don't cry if your ninja day fails to arrive.
Using NodeJuice will provide a super interface to better assist a developer's understanding of the mechanics by visually seeing results of every action, easily.  Add some text, press save and see the change instantly.

