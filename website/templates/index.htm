
<!--
<h1>Stephen Blum</h1>
<div>
My name is Stephen Blum, Lead Software Engineer at 
<a href="http://trustedopinion.com">Trusted Opinion</a>.
I'm always excited about the technical and the cutting edge.
I founded my first company in Seattle Washington in 2005 selling a new technology:
<a href="http://ltsun.com">ltsun.com</a>. LTSun is a first of its kind front-end real-time CMS.
After releasing the source code and selling remaining assets I joined
<a href="http://upsellusa.com">UpSellUSA</a> and became Lead Engineer.
Fast forward two years.
Now I work in SOMA San Francisco at Trusted Opinion as Lead Engineer.
Since joining this team I say often "it's like a vacation every day."

I continue to contribute new technological ideas. Here are two:

<a href="http://nodejuice.com">nodeJuice</a> is a push server on i/o events and has a hijack interface.
Connecting nodeJuicde to a browser allows instant updates and automatic browser refresh on file change.
<a href="http://www.saymix.com">Saymix.com</a>
is a live text broadcasting prototype which scales to an unlimited audience.
</div>
-->


<h1>JavaScript V8 Seeker Server and WSGI</h1>
This is <span class=n>node</span><span class=j>Juice</span>.
It is a set of tools which allows you to develop with a push connection to your web browser.
Automatic browser refresh on file change or update is what you can call it.
Develop on one to many browsers simultaneously without needing to reload manually.

<a href=http://vimeo.com/8459839>Watch the video to see what NodeJuice can do</a>.

<h2>NodeJuice sits Between the Server and Browser</h2>
NodeJuice sits between your web server and browser.
Use with your favorite web servers.
Works with Apache, Passenger, Nginx, Cherokee, and more.
A web server isn't required, NodeJuice comes with one in case you forgot yours.
Use your favorite text editor. Works with VIM, TextMate, Emacs, Dreamweaver and more.
NodeJuice comes with all the built-in tools you need to edit your files dynamically in real time.
Use your favorite web browser.
NodeJuice works with IE, Safari, FF, Opera, Chrome, and more.

There is nothing like the feeling you get when you press Save on your text editor and see all your browsers update instantly.
It's Free + Open Source.

It runs on
<span class=node>Node</span><span class=js>JS</span>;
a low level non-blocking network process with many capabilities. 

<h2>Seeker Server: <a href=http://vimeo.com/8459839>Watch the Video</a></h2>
<div>
    It updates all connected browsers when a change occurs.
    <strong>Automatic browser refresh on file change or update</strong>
    is what you can call it.
    Seeker Server works on all servers. Even without a server.
    Seeker Server is independent of WSGI
    and can be used with other servers such as Apache.
    <a href=http://vimeo.com/8459839>Watch the Video</a>
</div>

<h2 id=sidekick>Apache and Seeker Server (Sidekick)</h2>
NOTE: This step isn't necessary if you are using nodeJuice WSGI.
This step is for Apache and other web servers.
In order to easily use apache or other web servers, simply setup Sidekick:

<ol>
    <li>
        Copy <em>nodejuice.js</em> configuration into your application dir.
        This is the directory where your PHP, Ruby, Perl or Python files live.
        <pre class=code>cp ./nodejuice/demos/apache/nodejuice.js /my/dir/.</pre>
    </li>
    <li>
        Edit the configuration file to point the 
        <strong>fetch</strong> variable at your server.
        <pre class=code>// nodejuice.js - the config file
exports.sidekick = {
    host  : null, // Leave 'null' to listen on all hosts.
    port  : 8010, // access your server from this port.
    fetch : {     // point to your web server.
        host : 'localhost', <span class=keyword>// &lt;-- point this to Apache or other server.</span>
        port : 8080         <span class=keyword>// &lt;-- point this to Apache or other server.</span>
    }
};

exports.seeker = {
    host   : null,  // Leave 'null' to listen on all hosts.
    port   : 8002,  // port :-/
    delay  : 180,   // time in ms before page starts to reload.
                    // setting too low will cause file read errors in Apache
    wait   : 1200,  // time in milliseconds before a new connection.
                    // setting too low will make crazziness.
    add    : true,  // allow new file to push updates.
    remove : true,  // allow file delete to push updates.
    touch  : false, // allow file touch to push updates.
    access : false, // allow file reads to push updates.
    bits   : true,  // allow chmod/chown to push updates.
    save   : true,  // allow file save to push updates.
    dir    : true,  // allow directory changes to push updates.
    ignore : [      // path or file name to ignore.
        /\/\./,
        /git$/,
        /svn$/,
        /cvs$/,
        /swp$/,
        /~$/
    ]
};</pre>
    </li>
    <li>
        Launch ./nodejuice seeker server.
        <pre class=code>./nodejuice /my/dir/ sidekick</pre>
    </li>
    <li>
        Point your web browser to Sidekick url.
        <pre class=code>http://localhost:8010/</pre>
    </li>
</ol>

<h2>Seeker Server and Apache (Bypass Sidekick Server)</h2>
NOTE: This step isn't necessary if you are using nodeJuice WSGI.
This is an alternative approach for Apache and other web servers.
It is recommended that you use <a href=#sidekick>Sidekick Setup</a>.
Using Sidekick isn't required with Apache or another web server.
However Sidekick provides error detection and will allow <span class=n>node</span><span class=j>Juice</span> to keep a connection open even if Apache throws an error.
It is recommended that you use <a href=#sidekick>Sidekick Setup</a>.

<ol>
    <li>
        Copy <em>nodejuice.js</em> configuration into your application dir.
        This is the directory where your PHP, Ruby, Perl or Python files live.
        <pre class=code>cp ./nodejuice/demos/apache/nodejuice.js /my/dir/.</pre>
    </li>
    <li>
        Launch ./nodejuice seeker server.
        <pre class=code>./nodejuice /my/dir/ seeker</pre>
    </li>
    <li>
        Paste the following in the HEAD Tag of <em>all HTML files.</em>
        <pre class=code>&lt;script src="http://localhost:8002"&gt;&lt;/script&gt;</pre>
    </li>
</ol>
<div>
    This method won't be as cool as using nodeJuice's Sidekick in the face of dangerous errors in your PHP, Ruby or Python applications.  So be careful!
</div>

<h2>WSGI</h2>
<p>To launch nodeJuice as an <strong>instant web server on any directory</strong>:</p>
<pre class=code>./nodejuice /path/to/directory</pre>

<p>To create simple web application <a href=/rad>/rad</a>:</p>

<pre class=code><span class=comment>// app-file.js</span>
<span class=keyword>rad</span> ( <span class=string >/^\/about$/</span>, {
    file : <span class=string >'/templates/about.htm'</span>,
    info : <span class=string >'some info here'</span>
} )

<span class=keyword>rad</span> ( <span class=string>/.*/</span>, <span class=string>'hello world'</span> )
</pre>

<p>An advanced (and faster) web application will look like:</p>

<pre class=code><span class=comment>// app-file.js</span>
<span class=keyword>var</span> app = exports
app.journey = <span class=keyword>function</span>( request, response ) {
    response.impress( <span class=string>'/templates/index.htm'</span>, {
        right_now : <span class=keyword>new</span> Date
    } )
}</pre>

Above are two example apps on
<span class=n>node</span><span class=j>Juice</span> V8 WSGI.
Simple right?
It's like Google App Engine GAE and other WSGI Frameworks.
The advanced web app example is faster and provides extra fallbacks.
However the rad() example is easy.
To run this application type:

<pre class=code>./nodejuice /path/to/directory</pre>

This will launch both WSGI and Seeker Server.
Open to view:
<pre class=code>http://localhost:8080/</pre>
However, that isn't the raddest part.
You are probably here to see what Seeker Server can do.

