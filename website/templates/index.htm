<h1>JavaScript V8 Seeker Server and WSGI</h1>
This is <div class=n>node</div><div class=j>Juice</div>.
A Web Server Gateway Interface (WSGI) that lives on
<div class=node>Node</div><div class=js>JS</div>;
a low level http non-blocking web server.

<pre class=code><span class=keyword>var</span> app = exports || {};
app.journey = <span class=keyword>function</span>( request, response ) {
    response.impress( <span class=string>'/static/index.htm'</span>, {
        dynamic : <span class=keyword>new</span> Date
    } );
};
<span class=keyword>return</span> app;</pre>

Above is an example app on
<div class=n>node</div><div class=j>Juice</div> V8 WSGI.
Simple right?
It's like Google App Engine GAE and other WSGI Frameworks.
To run this application type:

<pre class=code>./nodejuice /path/to/directory</pre>

This will launch both WSGI and Seeker Server.
Open to view:
<pre class=code>http://localhost:8080/</pre>
However, that isn't the raddest part.
You are probably here to see what Seeker Server can do.

<h1>Seeker Server</h1>
It updates all connected browsers when a change occurs.
<strong>Automatic browser refresh on file change or update</strong>
is what you can call it.
Seeker Server works on all servers. Even without a server.
Seeker Server is independent of WSGI.

<div>...Video Here...</div>

<h1>
    <div class=mongo>Mongo</div><div class=db>DB</div> on
    <div class=node>Node</div><div class=js>JS</div>
</h1>

An effort to make a plan to integrate
<div class=mongo>Mongo</div><div class=db>DB</div>.

<h1>Seeker Server and Apache</h1>
...Instructions Here...
