<h1>JavaScript V8 Seeker Server and WSGI</h1>
This is <div class=n>node</div><div class=j>Juice</div>.
A Web Server Gateway Interface (WSGI) that lives on
<div class=node>Node</div><div class=js>JS</div>;
a low level http non-blocking web server. 
<a href=http://vimeo.com/8459839>Watch the video to see a live example</a>.

<p>To launch nodeJuice as an <strong>instant web server on any directory</strong>:</p>
<pre class=code>./nodejuice /path/to/directory</pre>

<p>To create simple web application <a href=/rad>/rad</a>:</p>

<pre class=code><span class=comment>// app-file.js</span>
<span class=keyword>rad</span> ( <span class=string>/.*/</span>, <span class=string>'hello world'</span> )</pre>

<p>An advanced (and faster) web application will look like:</p>

<pre class=code><span class=comment>// app-file.js</span>
<span class=keyword>var</span> app = exports;
app.journey = <span class=keyword>function</span>( request, response ) {
    response.impress( <span class=string>'/templates/index.htm'</span>, {
        right_now : <span class=keyword>new</span> Date
    } )
};</pre>

Above are two example apps on
<div class=n>node</div><div class=j>Juice</div> V8 WSGI.
Simple right?
It's like Google App Engine GAE and other WSGI Frameworks.
The advanced web app example is faster and provides extra fallbacks.
However the rad() example is easy.
To run this application type:

<pre class=code>./nodejuice /path/to/directory</pre>

This will launch both WSGI and Seeker Server.
Open to view:
<pre class=code>http://localhost:8080/</pre>
However, that isn't the raddest part.
You are probably here to see what Seeker Server can do.

<h2>Seeker Server: <a href=http://vimeo.com/8459839>Watch the Video</a></h2>
<div>
    It updates all connected browsers when a change occurs.
    <strong>Automatic browser refresh on file change or update</strong>
    is what you can call it.
    Seeker Server works on all servers. Even without a server.
    Seeker Server is independent of WSGI
    and can be used with other servers such as Apache.
    <a href=http://vimeo.com/8459839>Watch the Video</a>
</div>

<h2 id=proxy>Apache and Seeker Server (Proxy)</h2>
NOTE: This step isn't necessary if you are using nodeJuice WSGI.
In order to easily use apache or other web servers, simply setup the proxy:

<ol>
    <li>
        Copy <em>nodejuice.js</em> configuration into your application dir.
        This is the directory where your PHP, Ruby, Perl or Python files live.
        <pre class=code>cp ./nodejuice/demos/apache/nodejuice.js /my/dir/.</pre>
    </li>
    <li>
        Edit the configuration file to point the 
        <strong>fetch</strong> variable at your server.
    </li>
    <li>
        Launch ./nodejuice seeker server.
        <pre class=code>./nodejuice /my/dir/ proxy</pre>
    </li>
    <li>
        Point your web browser to the proxy url.
        <pre class=code>http://localhost:8010/</pre>
    </li>
</ol>

<h2>Seeker Server and Apache (Bypass the Proxy)</h2>
NOTE: This step isn't necessary if you are using nodeJuice WSGI.
Using the proxy isn't required with Apache or another web server.
However the proxy provides error detection and will allow <div class=n>node</div><div class=j>Juice</div> to keep a connection open even if Apache throws an error.

<ol>
    <li>
        Copy <em>nodejuice.js</em> configuration into your application dir.
        This is the directory where your PHP, Ruby, Perl or Python files live.
        <pre class=code>cp ./nodejuice/demos/apache/nodejuice.js /my/dir/.</pre>
    </li>
    <li>
        Launch ./nodejuice seeker server.
        <pre class=code>./nodejuice /my/dir/ seeker</pre>
    </li>
    <li>
        Paste the following in the HEAD Tag of <em>all HTML files.</em>
        <pre class=code>&lt;script src="http://localhost:8002"&gt;&lt;/script&gt;</pre>
    </li>
</ol>
<div>
    This method won't be as cool as using nodeJuice's Proxy in the face of dangerous errors in your PHP, Ruby or Python applications.  So be careful!
</div>

<h2>
    <div class=mongo>Mongo</div><div class=db>DB</div> on
    <div class=node>Node</div><div class=js>JS</div>
</h2>

An effort to make a plan to integrate
<div class=mongo>Mongo</div><div class=db>DB</div>.
