<h1>JavaScript V8 Seeker Server and WSGI</h1>
This is <div class=n>node</div><div class=j>Juice</div>.
A Web Server Gateway Interface (WSGI) that lives on
<div class=node>Node</div><div class=js>JS</div>;
a low level http non-blocking web server. 
<a href=http://vimeo.com/8459839>Watch the video to see a live example.</a>

<pre class=code><span class=keyword>var</span> app = exports || {};
app.journey = <span class=keyword>function</span>( request, response ) {
    response.impress( <span class=string>'/static/index.htm'</span>, {
        dynamic : <span class=keyword>new</span> Date
    } );
};
<span class=keyword>return</span> app;</pre>

Above is an example app on
<div class=n>node</div><div class=j>Juice</div> V8 WSGI.
Simple right?
It's like Google App Engine GAE and other WSGI Frameworks.
To run this application type:

<pre class=code>./nodejuice /path/to/directory</pre>

This will launch both WSGI and Seeker Server.
Open to view:
<pre class=code>http://localhost:8080/</pre>
However, that isn't the raddest part.
You are probably here to see what Seeker Server can do.

<h1>Seeker Server: <a href=http://vimeo.com/8459839>Watch the Video</a></h1>
<div>
    It updates all connected browsers when a change occurs.
    <strong>Automatic browser refresh on file change or update</strong>
    is what you can call it.
    Seeker Server works on all servers. Even without a server.
    Seeker Server is independent of WSGI.
    <a href=http://vimeo.com/8459839>Watch the Video</a>
</div>

<h1>Seeker Server and Apache</h1>
<ol>
    <li>
        Copy <em>nodejuice.js</em> configuration file into your application dir.
        This is the directory where you PHP, Ruby, Perl or Python files live.
        <pre class=code>cp ./nodejuice/demos/apache/nodejuice.js /my/dir/.</pre>
    </li>
    <li>
        Launch ./nodejuice seeker server.
        <pre class=code>./nodejuice /my/dir/</pre>
    </li>
    <li>
        Paste the following in the HEAD Tag of <em>all HTML files.</em>
        <pre class=code>&lt;script src="http://localhost:8002"&gt;&lt;/script&gt;</pre>
    </li>
</ol>
<div>
    This method won't be as cool as using nodeJuice's WSGI in the face of dangerous errors in your PHP, Ruby or Python applications.  So be careful!
</div>

<h1>
    <div class=mongo>Mongo</div><div class=db>DB</div> on
    <div class=node>Node</div><div class=js>JS</div>
</h1>

An effort to make a plan to integrate
<div class=mongo>Mongo</div><div class=db>DB</div>.
